{
  "name": "React and Redux",
  "order": 7,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7dbc367417b2b25x2bb0",
      "title": "Introduction to the React and Redux Challenges",
      "description": [
        [
          "",
          "",
          "The React and Redux challenges are being developed!",
          ""
        ]
      ],
      "releasedOn": "May 25, 2017",
      "challengeSeed": [],
      "tests": [],
      "type": "waypoint",
      "challengeType": 7,
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "bjfhdy287lm1eofius7413aq",
      "title": "Extract Local State into Redux",
      "description": [
        "<strong>Intro:</strong> You're almost done! Recall that you wrote all the Redux code so that Redux could control the state management of your React messages app. Now that Redux is connected, you need to extract the state management out of the <code>Presentational</code> component and into Redux. Currently, you have Redux connected, but you are handling the state locally within the <code>Presentational</code> component.",
        "<hr>",
        "<strong>Instructions:</strong> In the <code>Presentational</code> component, first, remove the <code>messages</code> property in the local <code>state</code>. These messages will be managed by Redux. Next, modify the <code>submitMessage()</code> method so that it dispatches <code>submitNewMessage()</code> from <code>this.props</code>, and pass in the current message input from local <code>state</code> as an argument. Because you removed <code>messages</code> from local state, remove the <code>messages</code> property from the call to <code>this.setState()</code> here as well. Finally, modify the <code>render()</code> method so that it maps over the messages received from <code>props</code> rather than <code>state</code>.",
        "Once these changes are made, the app will continue to function the same, except Redux manages the state. This example also illustrates how a component may have local <code>state</code>: your component still tracks user input locally in its own <code>state</code>. You can see how Redux provides a useful state management framework on top of React. You achieved the same result using only React's local state at first, and this is usually possible with simple apps. However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves."
      ],
      "challengeSeed": [
        "",
        "// Redux:",
        "var ADD = 'ADD';",
        "",
        "var addMessage = (message) => {",
        " return {",
        "  type: ADD,",
        "  message: message",
        " }",
        "};",
        "",
        "var messageReducer = (state = [], action) => {",
        " switch (action.type) {",
        "  case ADD:",
        "   return state.concat(action.message);",
        "  default:",
        "   return state;",
        "  }",
        "};",
        "",
        "var store = Redux.createStore(messageReducer);",
        "",
        "// Change code below this line",
        "class Presentational extends React.Component {",
        " constructor(props) {",
        "  super(props);",
        "  this.state = {",
        "   input: '',",
        "   messages: []",
        "  }",
        " }",
        " handleChange = (event) => {",
        "  this.setState({",
        "   input: event.target.value",
        "  });",
        " }",
        " submitMessage = () => {",
        "  this.setState({",
        "   input: '',",
        "   messages: this.state.messages.concat(this.state.input)",
        "  });",
        " }",
        " render() {",
        "  return (",
        "   <div>",
        "   <h2>Type in a new Message:</h2>",
        "   <input",
        "    value={this.state.input}",
        "    onChange={this.handleChange}/><br/>",
        "    <button onClick={this.submitMessage}>Submit</button>",
        "    <ul>",
        "     {this.state.messages.map( (message, idx) => {",
        "       return (",
        "        <li key={idx}>{message}</li>",
        "       )",
        "      })",
        "     }",
        "   </ul>",
        "   </div>",
        "  );",
        " }",
        "};",
        "// Change code above this line",
        "",
        "var mapStateToProps = (state) => {",
        " return {messages: state}",
        "};",
        "",
        "var mapDispatchToProps = (dispatch) => {",
        " return {",
        "  submitNewMessage: (message) => {",
        "   dispatch(addMessage(message))",
        "  }",
        " }",
        "};",
        "",
        "var Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);",
        "",
        "class AppWrapper extends React.Component {",
        " render() {",
        "  return (",
        "   <Provider store={store}>",
        "    <Container/>",
        "   </Provider>",
        "  );",
        " }",
        "};",
        ""
      ],
      "tail": [
        "var MountedComponent;",
        "try { MountedComponent = document.mount(React.createElement(eval(AppWrapper))); } catch(e) { MountedComponent = null; };",
        "var PresentationalComponent;",
        "var props;"
      ],
      "solutions": [],
      "tests": [
        "assert(MountedComponent.find('AppWrapper').length === 1, 'message: The <code>AppWrapper</code> should render to the page.');",
        "assert(MountedComponent.find('Presentational').length === 1, 'message: The Presentational component should render to the page.');",
        "assert((function() { PresentationalComponent = MountedComponent.find('Presentational'); return (PresentationalComponent.find('div').length === 1 && PresentationalComponent.find('h2').length === 1 && PresentationalComponent.find('button').length === 1 && PresentationalComponent.find('ul').length === 1); })(), 'message: The Presentational component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.');",
        "assert(Array.isArray(PresentationalComponent.node.props.messages), 'message: The Presentational component should receive <code>messages</code> from the Redux store as a prop.');",
        "assert(typeof PresentationalComponent.node.props.submitNewMessage === 'function', 'message: The Presentational component should receive the <code>submitMessage()</code> action creator as a prop.');",
        "assert((function() { var PresentationalState = MountedComponent.find('Presentational').node.state; return (PresentationalState.input === ''); })(), 'message: The state of the Presentational component should contain one property, <code>input</code>, which is initialized to an empty string.');",
        "assert((function() { var initialState = MountedComponent.find('Presentational').node.state; MountedComponent.find('input').simulate('change', {target: {value: '__MOCK__INPUT__'}}); var updatedState = MountedComponent.find('Presentational').node.state; return (initialState.input === '' && updatedState.input === '__MOCK__INPUT__'); })(), 'message: Typing in the <code>input</code> element should update the state of the Presentational component.');",
        "assert((function() { var beforeProps = MountedComponent.find('Presentational').node.props; MountedComponent.find('input').simulate('change', {target: {value: '__TEST__MESSAGE__'}}); MountedComponent.find('Presentational').node.submitMessage(); var afterProps = MountedComponent.find('Presentational').node.props; var afterState = MountedComponent.find('Presentational').node.state; return (beforeProps.messages[0] !== afterProps.messages[0] && afterProps.messages[0] === '__TEST__MESSAGE__' && afterState.input === ''); })(), 'message: Dispatching <code>submitMessage()</code> on the Presentational component should update Redux store and clear the input in local state.');",
        "((function() { var ulBefore = MountedComponent.find('ul').children(); MountedComponent.find('input').simulate('change', {target: {value: '__TEST__MESSAGE__2__'}}); MountedComponent.find('Presentational').node.submitMessage(); var ulAfter = MountedComponent.find('ul').children(); return (document.__original.replace(/\\s/g,'').includes('this.props.messages.map') === true && ulAfter.length === ulBefore.length + 1 && ulBefore.node.innerText === '__TEST__MESSAGE__' && ulAfter.nodes[1].innerText === '__TEST__MESSAGE__2__'); })(), 'message: The Presentational component should render the messages from the Redux store.');"
      ],
      "releasedOn": "May 25, 2017",
      "type": "waypoint",
      "challengeType": 8,
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "bjfhdy287lm1ed1za37413aq",
      "title": "React Redux Challenge Template",
      "description": [
        "",
        "",
        ""
      ],
      "challengeSeed": [
        "",
        "",
        ""
      ],
      "tail": [
       ""
      ],
      "solutions": [],
      "tests": [
        "assert((function(){ try { }; catch(e) { }; return true })(), 'message: ');"
      ],
      "releasedOn": "May 25, 2017",
      "type": "waypoint",
      "challengeType": 8,
      "isRequired": false,
      "translations": {}
    }
  ]
}