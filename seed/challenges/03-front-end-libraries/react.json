{
  "name": "React",
  "order": 5,
  "time": "25 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "bd7123c9c441eddfaeb4bdez",
      "title": "Create a Simple JSX Element",
      "description": [
        "React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.",
        "React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.",
        "For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.",
        "However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.",
        "The current code uses JSX to assign a <code>div</code> element to the constant <code>JSX</code>. Replace the <code>div</code> with an <code>h1</code> element and add the text <code>Hello JSX!</code> inside it."
      ],
      "challengeSeed": [
        "var JSX = <div></div>;"
      ],
      "tail": [
        "var jsx; try { jsx = eval(JSX); } catch (err) { console.warn(err); }"
      ],
      "solutions": [
        "var JSX = <h1>Hello JSX!</h1>;"
      ],
      "tests": [
        "assert((function(){ var jsx; try { jsx = eval(JSX); } catch(e) { return false; } return true })(), 'message: Your code does not transpile.');",
        "assert.strictEqual(jsx.type, 'h1', 'message: The constant JSX should return an <code>h1</code> element.');",
        "assert(jsx.props.children === 'Hello JSX!', 'message: The <code>h1</code> tag should include the text <code>Hello JSX!</code>');"
      ],
      "releasedOn": "May 25, 2017",
      "type": "waypoint",
      "challengeType": 8,
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "bd7123c9c441eddfaeb413av",
      "title": "Create a Stateless Functional Component",
      "description": [
        "Components are the core of React. Everything in React is a component and here you will learn how to create one.",
        "There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a <em>stateless functional component</em>. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We'll cover the second way to create a React component in the next challenge.)",
        "To create a component with a function, you simply write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires your function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:",
        "<blockquote>// After being transpiled,the &lt;div&gt;<br>will have a CSS class of 'customClass'<br> const DemoComponent = function() {<br> return (<br> &lt;div className='customClass' /&gt;<br> );<br>};<br></blockquote>",
        "Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.",
        "The code editor has a function called <code>MyComponent</code>. Complete this function so it returns a single <code>div</code> element which contains some string of text.",
        "<strong>Note:</strong>&nbsp;The text is considered a child of the <code>div</code> element, so you will not be able to use a self-closing tag."
      ],
      "challengeSeed": [
        "var MyComponent = function() {",
        "// change code below this line",
        "",
        "",
        "",
        "// change code above this line",
        "}"
      ],
      "tail": [
       "var Mock; try { Mock = eval(MyComponent); } catch (err) { console.warn(err); }",
       "var output;",
       "try { output = Mock(); } catch(e) { console.warn(e); }"
      ],
      "solutions": [
        "var MyComponent = function() {",
        "// change code below this line",
        "return (<div>Demo Solution</div>);",
        "// change code above this line",
        "}"
      ],
      "tests": [
        "assert(typeof MyComponent === 'function', 'message: <code>MyComponent</code> should be a function.');",
        "assert(typeof output === 'object', 'message: <code>MyComponent</code> should return a JSX element.');",
        "assert(output.type === 'div', 'message: <code>MyComponent</code> should return a <code>div</code> element.');",
        "assert(output.props.children.length !== 0, 'message: The <code>div</code> element should contain a string of text.');"
      ],
      "releasedOn": "May 25, 2017",
      "type": "waypoint",
      "challengeType": 8,
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "bd7123c9c441eddfaeb413aq",
      "title": "Create a React Component",
      "description": [
        ""
      ],
      "challengeSeed": [
       "class MyComponent extends React.Component {",
       " constructor(props) {",
       "  super(props);",
       " }",
       " render() {",
       "  // change code below this line",
       "",
       "",
       "",
       "  // change code above this line",
       " }",
       "};"
      ],
      "tail": [
       "var MyComponent; try { MyComponent = eval(MyComponent); } catch (err) { console.warn(err); }",
       "var ShallowComponent;"
      ],
      "solutions": [],
      "tests": [
        "assert((function(){ try { ShallowComponent = document.shallow(React.createElement(MyComponent)); } catch(e) { return false; } console.log(ShallowComponent); return true })(), 'message: Your code does not transpile.');",
        "assert.strictEqual(ShallowComponent.type(), 'div', 'message: The React component should return a <code>div</code> element.');",
        "assert.strictEqual(ShallowComponent.children().type(), 'h1', 'message: The returned div should render an h1 tag within it.');",
        "assert.strictEqual(ShallowComponent.node.props.children.props.children, 'Hello React!', 'message: The h1 tag should include the string <code>Hello React!</code>');"
      ],
      "releasedOn": "May 25, 2017",
      "type": "waypoint",
      "challengeType": 8,
      "isRequired": false,
      "translations": {}
    }
  ]
}
