{
  "name": "Basic JavaScript",
  "order": 0.006,
  "challenges": [
    {
      "_id": "bd7123c9c441eddfaeb5bdef",
      "name": "Unconditionally Loving Booleans",
      "dashedName": "waypoint-unconditionally-loving-booleans",
      "difficulty": "9.98",
      "description": [
        "Return true",
        "A boolean is a type of variable that represents either true or false (Named after the British mathematician George Boole).",
        "Booleans are often the result of a function or a comparative operation, for example <code> 1==1 </code> is true whereas <code> 1==2 </code> is false.",
        "They are most commonly found inside <code> if </code> statements which we shall cover later",
        "For now Let's modify our <code> welcomeToBooleans </code> function so that it will return <code> true </code> instead of <code> false </code> when the run button is clicked"
      ],
      "tests": [
        "assert(typeof(welcomeToBooleans())=='boolean', 'The value returned by welcomeToBooleans() should be a boolean value. (true of false)');",
        "assert(welcomeToBooleans() == true, 'The value returned by welcomeToBooleans() should be true');"
      ],
      "challengeSeed": [
        "function welcomeToBooleans() {",
        "// Good luck!",
        "return false;",
        "}",
        "",
        "welcomeToBooleans();"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c443eddfaeb5bdef",
      "name": "Start Using Variables",
      "dashedName": "waypoint-start-using-variables",
      "difficulty": "9.9801",
      "description": [
        "",
        "Now, use the <code>var</code> keyword to create a <code>variable</code> called <code>myName</code>. Set its value to your name.",
        "<code>Variables</code> are used to store values.",
        "The name variable comes from the fact that it's value, varies!",
        "Now Let's create our first variable called myName and because it's a name let's make it a string!",
        "Be sure to use lowercase and uppercase letters properly. JavaScript variables are written in <code>camel case</code>. An example of camel case is: camelCase.",
        "Look at the <code>ourName</code> example if you get stuck."
      ],
      "tests": [
        "assert(typeof(myName) == 'string', \"You're new variable should be a string\");",
        "assert(myName.length > 0, \"You're string should have something in it!\");"
      ],
      "challengeSeed": [
        "// var ourName = \"Free Code Camp\";",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(ourName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c442eddfaeb5bdef",
      "name": "Define Your Name",
      "dashedName": "waypoint-define-your-name",
      "difficulty": "9.9802",
      "description": [
        "",
        "In this challenge we are going to take a look at strings.",
        "Strings are a data type for words and sentences",
        "Now we are going to set the value of <code>myName</code> to your name by typing your name in quotes.",
        "Currently <code>myName</code> is empty. Type in your name and hit the submit button.",
        "Look at the <code>ourName</code> example if you get stuck."
      ],
      "tests": [
        "assert(typeof(myName) == 'string', 'The variable <code> myName </code> should be a string');",
        "assert(myName.length > 0, 'Give the string <code> myName </code> a value');"
      ],
      "challengeSeed": [
        "// ourName = \"Free Code Camp\";",
        "myName = \"\";",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(myName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c444eddfaeb5bdef",
      "name": "Define Your First and Last Name",
      "dashedName": "waypoint-define-your-first-and-last-name",
      "difficulty": "9.9804",
      "description": [
        "",
        "Programs will almost always have several different variables that are used to keep track of several different pieces of data",
        "We are now going to go and create two new variables <code> myFirstName </code> and <code> myLastName </code> that are strings",
        "You can assign these variables to be equal to your first and last names respectively."
      ],
      "tests": [
        "assert(typeof(myFirstName) == 'string', 'myFirstName should be set to a string');",
        "assert(typeof(myLastName) == 'string', 'myLastName should be set to a string');",
        "assert(myFirstName.length > 0, 'myFirstName Should not be empty');",
        "assert(myLastName.length > 0, 'myLastName should not be empty');",
        "assert(typeof(myName) == 'string', 'The variable <code> myName </code> should be a string');",
        "assert(myName.length > 0, 'Give the string <code> myName </code> a value');"
      ],
      "challengeSeed": [
        "// ourName = \"Free Code Camp\";",
        "// var ourFirstName = \"Free\";",
        "// var ourLastName = \"Code Camp\";",
        "",
        "var myName = \"\";",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(myName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c445eddfaeb5bdef",
      "name": "Combine Two Strings into One String",
      "dashedName": "waypoint-combine-two-variables-into-one-string",
      "difficulty": "9.9805",
      "description": [
        "Make a variable called <code>myName</code> by adding the string of your first name to the string of your last name.",
        "Strings can be combined in a process called <code>concatenation</code>.",
        "We are now going to take the two variables myFirstName and myLastName and assign them values",
        "Once we have given values to our two variables we can now concatenate them together with a space in between them",
        "Be sure to use lowercase and uppercase letters properly. JavaScript variables are written in <code>lower camel case</code>. An example of lower camel case is: lowerCamelCase.",
        "Look at the <code>ourName</code> example if you get stuck."
      ],
      "tests": [
        "assert(typeof(myFirstName) == 'string', 'myFirstName should be set to a string');",
        "assert(typeof(myLastName) == 'string', 'myLastName should be set to a string');",
        "assert(myFirstName.length > 0, 'myFirstName Should not be empty');",
        "assert(myLastName.length > 0, 'myLastName should not be empty');",
        "assert(typeof(myName) == 'string', 'myName should be a string');",
        "assert(myName.length > 0, \"You're string should have something in it!\");",
        "assert((/\\s+/).test(myName) == true, 'myName shuold contain a space');"
      ],
      "challengeSeed": [
        "// var ourFirstName = \"Free\";",
        "// var ourLastName = \"Code Camp\";",
        "// var ourName = ourFirstName + \" \" + ourLastName;",
        "",
        "var myFirstName = \"\";",
        "var myLastName = \"\";",
        "var myName;",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(myName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c448eddfaeb5bdef",
      "name": "Check the Length Property of a String Variable",
      "dashedName": "waypoint-check-the-length-property-of-a-string-variable",
      "difficulty": "9.9809",
      "description": [
        "",
        "Use the <code>.length</code> property to count the number of characters in the <code>lastNameLength</code> variable.",
        "For example, if we created a variable <code>var firstName = \"Julie\"</code>, we could find out how long the string \"Julie\" is by using the <code>firstName.length</code> property."
      ],
      "tests": [
        "assert(lastNameLength == 4, 'lastNameLength should have a length of 4');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var firstNameLength = firstName.length;",
        "",
        "var lastName = \"Chen\";",
        "",
        "var lastNameLength = lastName;",
        "",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(lastNameLength);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c549eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the First Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-first-character-in-a-string",
      "difficulty": "9.9810",
      "description": [
        "Use <code>bracket notation</code> to find the first character in a the <code>firstLetterOfLastName</code> variable.",
        "<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.",
        "Computers don't start counting at 1 like humans do. They start at 0.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "Try looking at the <code>firstLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(firstLetterOfLastName == 'C', 'The first letter of firstLetterOfLastName should be a C');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var firstLetterOfFirstName = firstName[0];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var firstLetterOfLastName = lastName;",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(firstLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c450eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Nth Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-nth-character-in-a-string",
      "difficulty": "9.9811",
      "description": [
        "Just like the last lesson where we used <code> Bracket Notation </code> to access the first letter we can use the same method to get the letters ar other positions",
        "Don't forget that computers start counting at 0 so the first letter is actually the zeroth one",
        "Let's now try to set <code> thirdLetterOfLastName </code> to equal the third letter of the <code> lastName </code> variable",
        "Try looking at the <code>secondLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(thirdLetterOfLastName == 'e', thirdLetterOfLastName);"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var secondLetterOfFirstName = firstName[1];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var thirdLetterOfLastName = lastName;",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(thirdLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c451eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Last Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-last-character-in-a-string",
      "difficulty": "9.9812",
      "description": [
        "Use <code>bracket notation</code> to find the last character in the <code>lastName</code> variable.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Julie\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.",
        "Try looking at the <code>lastLetterOfLastName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(lastLetterOfLastName == 'n', 'lastLetterOfLastName should be <code>n</code>');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var lastLetterOfFirstName = firstName[firstName.length - 1];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var lastLetterOfLastName = lastName;",
        "",
        "",
        "(function(v){return(v);})(lastLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c452eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Nth to Last Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-nth-to-last-character-in-a-string",
      "difficulty": "9.9813",
      "description": [
        "Use <code>bracket notation</code> to find the second-to-last character in the <code>lastName</code> variable.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Julie\"</code>, you can get the value of the third-to-last letter of the string by using <code>firstName[firstName.length - 3]</code>.",
        "Try looking at the <code>lastLetterOfLastName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(secondToLastLetterOfLastName == 'e', 'secondToLastLetterOfLastName should be e');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var thirdToLastLetterOfFirstName = firstName[firstName.length - 2];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var secondToLastLetterOfLastName = lastName;",
        "",
        "",
        "(function(v){return(v);})(secondToLastLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7993c9c69feddfaeb6bdef",
      "name": "Magical Maths",
      "dashedName": "waypoint-magical-maths",
      "difficulty": "9.9814",
      "description": [
        "",
        "In javascript whole numbers (called integers) can be really easily to preform mathematical functions",
        "Let's try a few of the most commonly used ones now",
        "We use <code> + </code> for addition",
        "We use <code> - </code> for subtraction",
        "We use <code> * </code> for multiplication",
        "We use <code> / </code> for division",
        "Replace the <code> _ </code> with correct number to achieve the result in the comment."
      ],
      "tests": [
        "assert(add==20, 'The result of the sum in add should be 20');",
        "assert(subtract==12, 'The result of the sum in add should be 12');",
        "assert(multiply==80, 'The result of the sum in add should be 80');",
        "assert(divide==2, 'The result of the sum in add should be 2');"
      ],
      "challengeSeed": [
        "var add = 10 + _;//equals 20",
        "var subtract = 45 - _;//equals 12",
        "var multiply = 8 * _;//equals 80",
        "var divide = 66 / _;//equals 2",
        "",
        "",
        "",
        "(function(w,x,y,z){return('add='+w+', subtract='+x+', multiply='+y+', divide='+z);})(add,subtract,multiply,divide);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7993c9c69feddfaeb7bdef",
      "name": "Working With Decimals",
      "dashedName": "waypoint-working-with-decimals",
      "difficulty": "9.9815",
      "description": [
        "",
        "in javascript we can can work with decimal numbers",
        "These decal numbers are known as floats.",
        "Let's take a look at working with floats now"
      ],
      "tests": [
        "assert(add == 13.5, 'The result of add should be 13.5');",
        "assert(subtract == 7.25, 'The result of subtract should be 7.25');",
        "assert(multiply == 15, 'The result of multiply should be 3.75');",
        "assert(divide == 2.25, 'The result of divide should be 2.25');"
      ],
      "challengeSeed": [
        "var add = 9 + _;//equals 13.5",
        "var subtract = 12 - _;//equals 7.25",
        "var multiply = 3.75 * _;//equals 15",
        "var divide = 9 / _;//equals 2.25",
        "",
        "",
        "",
        "(function(w,x,y,z){return('add='+w+', subtract='+x+', multiply='+y+', divide='+z);})(add,subtract,multiply,divide);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7993c9c69feddfaeb8bdef",
      "name": "An Array Of new Information",
      "dashedName": "waypoint-an-array-of-new-information",
      "difficulty": "9.9816",
      "description": [
        "",
        "In javascript we can store lists or collections of data in what are called arrays",
        "Arrays are distinguished by the <code> [ </code> and <code> ] </code> around the data. Each piece of data is separated be a <code> , </code>",
        "Now let's create a new array called <code> myArray </code> with a <code> string </code>, a <code> number </code> and a <code> array </code> with a <code> , </code> separating each one",
        "Refer to the example if you get stuck",
        ""
      ],
      "tests": [
        "assert(typeof(myArray) == 'object', 'myArray should be an array');",
        "assert(myArray[0] !== undefined && typeof(myArray[0]) == 'string', 'The fist item in myArray should be a string');",
        "assert(myArray[1] !== undefined && typeof(myArray[1]) == 'number', 'The second item in myArray should be a number');",
        "assert(myArray[2] !== undefined && typeof(myArray[2]) == 'object', 'The third item in myArray should be an array');"
      ],
      "challengeSeed": [
        "//var array = ['John', 23,  [2, 'cat']];",
        "",
        "var myArray = [];",
        "",
        "",
        "(function(z){return(z);})(myArray);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9994c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With pop()",
      "dashedName": "waypoint-manipulating-arrays-with-pop",
      "difficulty": "9.9817",
      "description": [
        "",
        "When and array has been defined we still have the ability to make changes to it afterwards",
        "One common way in which we can manipulate the data in an array is through <code> .pop() </code>",
        "<code> .pop() </code> is used to \"pop\" a value from the end of an array. We can retrieve this value by preforming the pop in a variable declaration.",
        "any type of variable can be \"popped\" from and array",
        "Let's try <code> .pop() </code> now"
      ],
      "tests": [
        "assert((function(d){if(d[0] == 'John' && d[1] == 23 && d[2] == undefined){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23])');",
        "assert((function(d){if(d[0] == 'cat' && d[1] == 2 && d[2] == undefined){return(true);}else{return(false);}})(removed), 'myArray should only have the first two values left([\"cat\"], 2)');"
      ],
      "challengeSeed": [
        "//var numbers = [1,2,3];",
        "//console.log(numbers); //Gives [1,2,3]",
        "//var removed = numbers.pop();",
        "//console.log(numbers); //Gives [1,2]",
        "//console.log(removed); //Gives 3",
        "",
        "var myArray = ['John', 23, ['cat', 2]];",
        "var removed = _;//This should be ['cat', 2] and myArray should now be ['John', 23]",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y) + ' & removed = ' + JSON.stringify(z));})(myArray, removed);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9995c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With push()",
      "dashedName": "waypoint-manipulating-arrays-with-push",
      "difficulty": "9.9818",
      "description": [
        "",
        "Now that we've learn how to <code> pop </code> things from the end of the array, we need to learn how to <code> push </code> stuff back to the end",
        "Let's take the code we had last time and <code> push </code> this value to the end: <code> ['dog', 3] </code>"
      ],
      "tests": [
        "assert((function(d){if(d[2] != undefined && d[0] == 'John' && d[1] == 23 && d[2][0] == 'dog' && d[2][1] == 3){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23, [\"dog\", 3]])');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['cat', 2]];",
        "var removed = myArray.pop();",
        "//Add a ['dog', 3] to the end of myArray using push",
        "",
        "",
        "(function(z){return('myArray = ' + JSON.stringify(z));})(myArray);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9996c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With shift()",
      "dashedName": "waypoint-manipulating-arrays-with-shift",
      "difficulty": "9.9817",
      "description": [
        "",
        "Another common way in which we can manipulate the data in an array is through <code> .shift() </code>",
        "<code> .shift() </code> is used to \"shift\" a value from the start of an array. We can retrieve this value by preforming the shift in a variable declaration.",
        "Let's try <code> .shift() </code> now"
      ],
      "tests": [
        "assert((function(d){if(d[0] == 23 && d[1][0] == 'dog' && d[1][1] == 3 && d[2] == undefined){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23])');",
        "assert((function(d){if(d == 'John'){return(true);}else{return(false);}})(removed), 'Removed should contain \"John\"');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['dog', 3]];",
        "var removed = _;//This should be ['John'] and myArray should now be ['John', 23]",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y) + ' & removed = ' + JSON.stringify(z));})(myArray, removed);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9997c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With unshift()",
      "dashedName": "waypoint-manipulating-arrays-with-unshift",
      "difficulty": "9.9818",
      "description": [
        "",
        "Now that we've learned how to <code> shift </code> things from the start of the array, we need to learn how to <code> unshift </code> stuff back to the start",
        "Let's take the code we had last time and <code> unshift </code> this value to the end: <code> 'Paul' </code>"
      ],
      "tests": [
        "assert((function(d){if(d[0] == 'Paul' && d[1] == 23 && d[2][0] != undefined && d[2][0] == 'dog' && d[2][1] != undefined && d[2][1] == 3){return(true);}else{return(false);}})(myArray), 'myArray should now have [\"Paul\", 23, [\"dog\", 3]])');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['dog', 3]];",
        "var removed = myArray.shift();//This should be 'John' and myArray should now be [23, ['dog', 3]]",
        "//Add 'Paul' to the start of myArray",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y));})(myArray);"
      ],
      "challengeType": 1
    }
  ]
}
