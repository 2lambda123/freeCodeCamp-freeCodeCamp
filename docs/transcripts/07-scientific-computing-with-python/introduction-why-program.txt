Introduction: Why Program? 
Transcript:
Hello everybody and welcome to chapter 1 of Python for everybody. I’m Charles Severance, I’m your instructor, and I welcome you to this class. The basic goal of this class is to teach everybody how to program, regardless of your background. You don’t have to be a math whiz, you don’t have to be a computer expert no matter how old you are or what your background is. We want to teach you how to program. So welcome to the course welcome to chapter 1. 
So the first thing to understand is that the purpose to learn to program is because computers want to do things for us, they are built and created and designed and their hardware is set up so that they basically ask us what do you want to do next. If you grab your phone your phone sort of does nothing until you tell it what to do. It waits for you and it’s just waiting for you and all the hardware computer technology around you is generally waiting for you. And we can use this for useful things. We can use it to play video games, we could have it help navigate for our cars. Someday we may even have self driving cars. And it’s really, in a sense, in my mind, silly, if you spend your whole life not really understanding this technology and I think it’s important that we learn to tell computers what to do rather than just let them increasingly control our lives and so as we’ll see computers aren’t very smart on their own, we humans are the ones that imbue them with knowledge, and what we need to learn to speak their language. It is much easier for us to learn to speak their language than it is for them to learn to speak our language. Although with these cell phones we can begin to see little bits where they can begin to understand but you would be amazed at the 40 or 50 years that it takes that it has taken us to understand, to begin to understand how to build programs to begin to understand. So I’m bringing you into something where you are going to learn the ways of programming and the ways of the computer because it is easier to teach you how to program than it is to teach this how to work in your world even though ultimately the goal is to get this to do work for you.
So part of what I’m trying to do is move you from a user perspective where you just look at the computer as something that someone else has constructed and that you are the user of to the point where you construct new things. Now the first kinds of things you are going to construct are actually things to solve your own problems. And it’s a very popular now to work on data and Python is an excellent programming language for data mining and data analysis and that’s a lot of what we’re going to do in this course although really it’s a gateway to all kinds of things like artificial intelligence and gaming or navigation or mobile applications or entertainment all kinds of things but first we have to learn to program we have to move from using the computer as a tool to using the tools within the computer that allow us to change how to computer sees the world. 
So there’s a couple of reasons that you might want to be a programmer. Some of you may be looking to improve your career to be paid to work on programming and I’ve been a paid programmer most of my life. I like it. It's a good job you don’t have to stand in the mud you don’t have to lift things you have to use your brain and I’ll just say that it has been nice for my career to not be exposed to the elements but to be able to work often wherever I want. That’s actually our secondary goal, our first goal is to get you to write programs that solve problems that you have to solve. Maybe you have a job as an accountant or a lawyer or something else and maybe you run across some data maybe there’s some system that logs your time and it’s not quite giving you the report you want it to give your and you say can I just grab the log data myself and write a program to do some analysis to say what’s the average this verse that ot the average of some other thing right and so that’s the basic idea, that you’ll initially use computers to serve your own ends that makes it a lot easier to write programs because you don’t have to worry about a million users using your software because if it works for you then we’re happy and so it takes a little more training to write software for other people or for thousands and thousands of other people. 
So part of what I want to do is to change your perspective you know you look at this from the outside and you see it from the outside and you click on things I want to turn this around and I want you to be the person inside this looking out at the world and as a programmer we are making things inside these computers for the world and so we want to pull you into being part of this we want you inside this or thinking inside this and what you learn is that if you’re inside this computer and you are taking your instructions to build pgrams to be used by the human - oops almost dropped that- the human outside your computer, you have things that you need to take advantage of. There’s things like the central processing unit, the memory of this system, the network connection of this system the disk drive or permanent storage on this system and as a programmer you are kind of mediating between all those internal resources that this things has that are not very smart but are highly powerful and mediating with what that user wants. So we take the end user and we programmers serve the end user but the computer serves us so together between us and all the computer resources we can serve the needs of the end user and we do this by writing code or programming. 
Ok so what is that? Programming is a sequence of instructions where we are giving instructions to the resources inside the computer in a way to accomplish the goals of the end user. And remember sometimes we are our own end users. It's not just you’re not always doing a startup, you're not always writing a mobile gaming system, sometimes you’re writing something for yourself. So sometimes you’re writing something to solve a program you’re crafting, you're doing something that you could do by hand or manually and you’re making some clever little 25 or 100 line program and you’re putting that in. Other times like the times when I’m working on the open source learning management system Sakai it is my creativity I’ve got an idea and I want to share it with a million users and so I write my code for an external audience. And so code is that sequence of instructions. The computer itself doesn’t know how to hand a roster out but I can write code that will hand a roster out by looking at the data inside this computer inside this application. 
So if you think about programs we have programs for computers and programs for humans. And a number of years ago now I’m sooner or later this will be me showing my age, this is an example of the macarena and the macarena is a song that is effectively a sequence of instructions you put your left hand out you put your right hand out and you put it on your shoulder and you wiggle wiggle wiggle and you spin around and you do things and this is a program for people and so I want you to take a quick look at this and see if you can find anything wrong with this particular program. So look really closely. So I’ll show you. It’s got some typographical errors in there and we as humans are really good at reading or hearing typographical errors and correcting them automatically and instantly and but computer are not computer are extremely literal if it saw this ham instead of hand it would think what’s a ham and why am I going to his someone in the back of the head with a ham and why would I take my left hand and hit somebody you know these are all bad things, but the computer is going to take us very literally and so we have to be really precise and the computer just doesn’t know the difference between what we mean and what we say so we have to be very precise and this is one of the great frustrations that people have when they first start using computers and so we have to get this right and we have to get these little bits of text exactly the way they are computers will blow up with syntax error and they seem to make quite a fuss when you make the tiniest of errors but you’ll get used to that. I mean that’s because not because you’re bad or you’re less than awesome it just means the computers can’t compensate when you make small mistakes so you’ve got to get used to the fact that the computer is sort of intellectually not as strong as you and so it gets confused really easily even though when it get confused it says seemingly mean things to you, so you’ll get used to that. 
Okay so the first thing I want to do is I want to throw up some text and I want you to while this text is up I want you to count the number of each word in this text and tell me what the most common word is in this text so here we go\
Okay so I kind of made that hard on you on purpose by moving it around and distracting you and confusing you but even if it’s not moving at all it’s a little bit you know tricky to do you probably stare at it a couple of times your brain is going back and forth and back and forth. And so text analysis is one of the great things that computer are very very good at and some of the things that you know they can translate text and that’s because they’ve looked at a lot of information so looking at text is actually something computers are really good at and so if we take a look at the kind of programs that we’re going to write to do this kind of thing this is something that humans are not naturally good at but computers are super good at now I’m not going to have you look at this code this code you will understand in a few weeks but basically this is a set of instructions to open a file read that file read all the words in that file create a histogram of the words in the file and then search through that histogram to find the most common word and tell us what the most common word is in that file. In this clown file the word “the '' is the most common it happened seven times and here’s another large file called word.txt and the word “to” is the most common thing. So our goal is to get you to be able to write this on your own so you can say, “you know what I've got a problem to solve that is what’s the most common word in this file I know how to start and then I know how to finish I know how to do the stuff in the middle,” and we have to learn this kind of weird language but when we do we can count millions of words as easily as it counts 20 words so that’s the fun of all of this is to teach you this language to so that you can solve that problem so that you don’t have to solve it because you could solve it but it’s not something that you’re naturally good at and it’s hard work. 
So up next we’re going to talk a little bit about the hardware architecture that you’re going to be experiencing as you write programs.

