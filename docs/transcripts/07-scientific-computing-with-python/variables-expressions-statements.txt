Variables, Expressions, and Statements
Transcript:
Hello and welcome to chapter 2. Now we’re going to continue to talk about the building blocks of Python: variables, constants, statements, expressions etc. The first thing we have to talk about are constants: these are just things we call them constants because they don’t change, they are numbers, strings etc. And we use them to sort of start calculations of you know if something is greater than forty hours we’re going to do something and so 40 is the constant in that situation. So we have 123, we have 98.6, we have “hello world” which is a string by enclosing it in quotes. We pass each of these things to the print function and a side effect of the print function is that we see the output. So print(123) prints out 123, print(98.6) prints it out. So these are just really the syntax of constants and without constants we can’t write really much of anything.
The other foundational notion of any programming language are the reserved words, and  like I said before, reserved words are these special words where Python is listening for them and they have very special meanings. So when Python sees “if” it’s not just any other word, it means how Python implements conditional execution. 
Variables are the third building block, and that is a way that you can ask Python to allocate a piece of memory and then give it a name. You can put stuff in there, sometimes you just put one value later we’ll see when we do collections in chapters 8 and 9 we will see that more than one value can be put into a variable. And the variable, consider how we control the variable, is through the assignment statements. As I said before, it’s important to think of the assignment statements as having an arrow to it. So this is not saying x for all time is the same as 12.2, what it’s saying is take 12.2 find a place, find some memory in your computer there Mr.Python, give it a label “x,” we get to choose the x, that’s the variable part, we chose it,   right and then stick 12 in it. And then the same is true for 14, we’ll find in there another spot, name it “y”  and then put a 14 in there, so think of this as an arrow every time you see that equality, the assignment in an assignment statement. 
Now these variables hold one value. So now we have these three statements, these two,  and then the third one executes it says put 100 into x but that wipes out the old value, 12.2 and rewrites it with 100, and so we can change the variables, that’s another reason that we call them variables. 
There are some names, now some rules for making variable names: you can start with a letter or an underscore. We tend not to, as normal, programmers use underscore, we tend to reserve those for variables that we use to communicate with Python itself. So when we’re making up a variable we tend not to use underscores as a pre, first character, you can have letters, and numbers, and underscores, after the first character, and they’re case sensitive. But it’s really a bad idea to use case as the only differentiator. So in this case “spam” “eggs” “spam23” and “_speed” are all totally legit, we would probably not use this one [“_speed”] unless we were going to because Python told us to use that variable. 23spam starts with a number, pound sign starts and dot is not a legitimate variable character. And “spam” capital “Spam” and all cap “SPAM” are different, but this is not something that you want to sort of depend on too much  so that’s just the rule names, we tend to start them with a letter and then use letters, numbers, and underscores. Underscores other than the first character are generally pretty common, and you’ll see those used a lot.
Now, when we are choosing variable names one of the things about variables is that we get to choose the name, we get to choose the name x, choose the name y. Sometimes we like them short, but sometimes we want them descriptive and the notion of making variables descriptive is often confusing for beginning students. Sometimes it’s really helpful if you’re gonna have a line of text and you name the variable line, that’s great because the next person reading your program says oh that must be the line of text whereas it also can become misleading that--line-- the name of a variable somehow has meaning so sometimes like having singular variables and plural variables like friend and friends, and like is plural, does Python know about singular and plural? And the answer is no. So sometimes we pick variables that make no sense, sometimes we pick variables that make  a lot of sense, this is just something that you as a beginning programmer is going to have to understand: that we can pick anything we want and so you’ll see I’ll try to call attention to this in the first few lectures as we go through.
So here is a bit of code with an assignment statement, two assignment statements, and a multiplication and a print statement. And you can say what is this doing? Now python is perfectly happy with this code because it assigns it in there, you have said please go give me this as a label, and then we assign two variables, and then we’re carefully pulling these two variables back out, multiplying them together and then sticking them in another variable and then printing that variable out. That seems like you know we can figure out what it is you just have to look really carefully and as a single character mistake and Python is going to be, you know pretty unhappy okay? So that’s one way to write this program. But it’s hard though because you could --any of those characters or long variables and they’re random stuff, it’s not very friendly to anyone who might read your program. 
Now this looks a little friendlier. It’s the same program because Python just wants a correspondence you picked a, you picked b, and you picked c and it’s really much easier for us to see what’s going on. And so this is, in a way, going from here to here is much friendlier, but we can be even friendlier if we pick mnemonic variable names. So this is not mnemonic, this is short and convenient, this is long and inconvenient. Python is happy with any of these. 
Here on the other hand is another version of the exact same program and now you think to yourself, oh yeah now I get it, 35 is the number of hours, twelve dollars and fifty cents is the rate, and they we’re going to multiply the hours and the rate and come up with the pay and we’re printing out the pay. Now whoever wrote this program is-- much is-- helping us greatly understand what’s going on, and that’s good. Choosing variable names, Python again, all three of these are the same to Python. Choosing variable names in a way that helps your reader understand what’s going on is a great thing. The problem is, the danger is, if you read this and you think that somehow Python understands payroll. That if you name a variable hours that Python knows what hours means. The answer is Python really doesn’t care what you name the variable as long as what you name it, you use it. Right? So you’ve got to be careful, and do you’ll see I will, when I write my code in these first few weeks, first few lectures, I will sometimes write it with gibberish, I’ll sometimes write it with extremely short, but meaningless variable names, and sometimes I’ll use meaningful variable names and I’ll call your attention to it and it will get you. You’ll start--when you look at this third kind and it has meaningful variables or mnemonic variable names, you’ll just instinctively want to give Python more intelligence than it sort of deserves, I guess, that’s probably the best way to say that. 
So, we’ve talked about constants, we’ve talked about reserved words, we’ve talked about variables. So here we have a sentence, like we’ve already done some of these things, where we set x equals to 2, we retrieve the old value of x and add two to it so that becomes four and then we print four out. Print is a function that’s built in and we pass in whatever we want to print out. So this parentheses is part of a function call. 
Okay, so an assignment statement, you have to really get it, your head around the notion that it has this arrow nature and that it evaluates this entire right hand side, before we change the left-hand side. So you can think of this as at time step one it does this and then at time step two it does the copy. And that’s how you can have something like x on both sides of an assignment statement. 
And so if we have, for example, x, and x has 0.6 in it. X has 0.6 in it--what happens is is that at first it sort of ignores this part right here and evaluates the expression. So it pulls the 0.6, everywhere x appears it pulls 0.6 out, then it starts running these calculations and then it has the new value after all the calculations done. Then, and only then, is it going to put that back into x, and so it sort of takes that and puts it back into x, and then wipes out the old value at this point this has all been taken care of and it’s been reduced down to the 0.93 and so that is what’s put in as the new value. 
So up next we’ll talk a little bit more about making more complex expressions.