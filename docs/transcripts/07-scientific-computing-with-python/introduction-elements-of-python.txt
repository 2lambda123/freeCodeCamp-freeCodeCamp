Introduction: Elements of Python
Transcript:
So now we’re going to start learning the actual Python language. So what do we say. You can think of this almost like writing almost like writing a story we’re going to start with the basic vocabulary we’re going to talk a little bit about lines or sentences and then we’re going to start talking about how to put those sentences together to make a coherent paragraph. And you just have to accept the fact that when I start teaching you this stuff it’s not going to make sense for about six or seven more chapters so just sort of bear with me, accept, I mean i remember when I first learned it went from me confused confused confused confused confused holy mackerel this is awesome and so i expect many of you will go through that same thing. So just learn the first parts, accept the fact that it doesn't necessarily make sense in a big picture, and just bear with us. So we’ll start with vocabulary, we'll start to make sentences and then we’ll have little short stories and paragraphs. 
And so this is a short story about how to count the words in Python. Um it’s got a couple of paragraphs and we’re going to look at all of this stuff eventually so we start with a set of reserved words and what are reserved words well they’re words that Python expects when you use these words that they’re going to mean exactly what Python expects them to mean. And what it really means is that you’re not allowed to use them for any other purpose than the purpose that Python wants--it’s sort of part of the contract. It’s like when you have a dog and you go um what did you think of that television program and the dog has no idea what you’re saying and then you say do you want to wait until saturday to go to the veterinarian and the go still doesn’t know what you’re saying and then you say how would you like to take a walk and the dog goes walk I know what that means and then hits the door the way the dog sees you is blah blah blah blah walk blah blah blah blah food blah blah blah blah treat blah blah blah blah walk that kind of how Python looks at these reserved words when you say class it goes class I know what that means. Now if I say zap it’s like oh zap something that you get to decide or it’s a maybe a variable name so reserved words are simply words that when you use these words in Python, and there’s only a few of them like and, or del, or if maybe, pass maybe in a lot of these you won’t end up using them it’s just that these are reserved for Python and part of the Python vocabulary. This is Python vocabulary. Now when I move from words to sentences you see that Python is a series of lines a Python program is a series of statements they have an order because the computer wants to know what’s next what’s next what’s next. So what’s next is: start at the beginning. I already talked about an assignment statement that basically says x equals 2 this is not a mathematical statement this is a directive to say take this variable two, this value two, this constant two, and stick it in a location in your memory and remember that I asked you to name it x. X is a variable something that you made up, you chose that, and so but it’s Python’s job to remember it so this says whatever that x is, there’s a two in there, now pull that x back out and add two to it which makes it four, and stick it back in x so that makes this a 4 so x is a four and print x says go look up that thing that was in x and print it out and so these are like each line has something to it, and I’m using a reserved word and actually that’s a function but it’s a reserved word too, and so there’s reserved words and all these things and you combine these there are operators plus is an operator, equals is an operator, these things do things, and we’ll learn all this stuff in time. So the basic building blocks of lines of Python
Now as we take these lines of Python and build them up we end up making paragraphs programming in paragraphs. And so one of the things that is important is I showed you how to do interactive Python so you just type Python and you type a statement and statement and statement um those get really tiring after about three or four lines of Python because you start making mistakes and you have to start over. So that the better thing to do is that as your program gets larger is to write a script. 
Put your Python instructions in a file and then tell Python to read from the file and then run the script as it’s entered in that file. We tend to name these files with dot py and i’ve got a series of videos that you can watch to figure out how this all works. Like I said you can type interactively to Python and it’s a great way to experiment with Python check to see if a statement does what you think it does but script is the way after we are past one or two lines of code we write it in files and then run it separately. So there are a couple of basic patterns and it’s really important to understand each of these patterns and like I said we’ll teach you these patterns separately and then we’ll combine them together and when you combine them together is when you say oh that’s what a program is so you have to suspend disbelief. 
We have a couple of different patterns one is a sequence of steps do this then do this then do this conditional is like skipping something, repeated does it over and over and over again computers are really good at repeating stuff much better than people people get tired going over and over doing the same thing and then we have store and repeated steps as well. And so if we take a look at this and we take a look at a Python program, this is a piece of code this is a little script if you type this into the code take this code , Python code, into a file and ran it is starts at the beginning and then it goes to the next line and the next line and the next line and Python executes the scripts as you write them so it says stick a variable, find a place called, in your memory called x stick two into that ok then go to the next one print that out so the program’s producing output now go read x and add two to it and stick it back in x so x is four then print that. This side over here, this is called a flowchart. I’m not going to make you draw flowcharts. I’m only going to draw them a few times in ways that I think will help you, But you can think of it as Python when it finishes something it goes onto the next one unless you tell it otherwise, finishes this goes onto the next one, finishes this goes onto the next one then finishes this and now the program is all do. So that’s sequential steps you type them in Python runs it. They’re important but sort of uninteresting because you know they’re--you can only get so far and you can’t really make them intelligent because it’s always going to do the next one. 
So the next thing we do is what are called conditional statements. And this is where it starts to get intelligents, I mean where you are able to encode your brain into the computer like oh wait a second let’s only do this step if something is true. And the syntax that we tend to use here is the reserved word if. Okay and so the if is like a little fork in the road, you can go one way or you can go another way and you’re asking a question, so inside the if statement there is a question that says “is x less than ten?” That resolves to a true or false: if it’s less than ten that’s true, if it’s greater than ten that’s false. And so then what we do is if it’s less than ten we have this indented block of code, there’s also this colon that tells us we’re in the beginning of an indented block of code. So what it basically says is if this is true, run that code, if it’s false skip that code. So it can either run it or skip it depending on this question that’s being asked. Now if you look at this code it’s pretty obvious what’s going on. It comes down x is five, if x is less than ten, that’s true, so it runs this code and prints out “Smaller” and then it comes back here, it deindents, the next basic sequential, this ends up being kind of a block, if X is greater than 20 oh come back come back if x is greater than 20 this turns out to be false because x is five and so it skips this so the bigger never comes out and then it continues on and prints “Finis”,--oops that’s a typographical error, make that a lowercase “print”-- and then prints “Finis.” So it comes in, runs this, skips this, and then finishes ok. 
So here is the last one we’ll talk about, the repeated steps. We’ll get back to the store and retrieve later but for now we’re just going to talk about three of the four. This is another program and the key is that we’re going to use this same choice where we’re going to go in, but then we’re going to run for a while and then we’ll have an exit condition where we get out. So this is repeated over and over and over and over again. And this is the essence of how we make computers do things that are seemingly difficult, well they’re more naturally difficult for people okay, and so how do we encode this notion that we want to do something, not forever, but for a while, how do we encode that notion?
 And so we do it in this way, so we have our statement sequentially go to this “while.” While is a keyword, and it’s asking another question that’s a true/false question’: is n greater than zero? I read this as: as long as n remains greater than zero keep doing this indented block. And you have a  colon at the end, and then you have two lines of code that’s indented so that tells you what the loop is and then this is now de-indented and so it comes in and if this is true if this is true if this is true it runs these two lines prints out N, N is five, and then it says N equals n minus 1 which makes n be four, and it goes back up and it goes up and it asks this question again, is n greater than zero, if it is continue on: it prints four, and then subtracts it and it does that for 3, 2, and prints out 1, then it comes up and now after this n is now 0, n is now 0, and n is no longer greater than zero so it takes sort of the exit ramp and goes down here so it takes the exit ramp and goes to here and runs the next line. 
Now, we’re going to cover all of this again. I’m just trying to give you the big picture, next couple of chapters we’re going to hit all these things again and we’re going to hit them in much more detail with a lot better information. This is now sort of like combining these, and again, I don’t want you to really like, know this stuff, just you will know this in a couple of weeks, you will see this program again, but this shows you how we combine those patterns of repeated, sequential, and conditional together. 
So this is a bit of sequential code, comes in here, runs this, which happens to ask for a file name, then it opens the file, it creates a data structure called a dictionary, this is all sequential, now the for is another form of loops so this is going to loop for a while, and this is within a loop we can even have two indents, and that’s another loop so these are like repeated and then it goes down to the next sequential bit then it does this here’s another loop that’s going to run and then here’s a conditional that’s going to run and then when it’s all done we print out the last thing. And this is of course the program that does--you know the-- it figures out the most common word and prints that most common word out. So this is a Python short story, it reads some data, it reads the name of a file, opens taht file, it talks about how to make a histogram and then it looks through for the most common word. So don’t worry too much about this, over the next couple weeks we’ll fill in the pieces so that you absolutely understand every single line of this code. So this is a quick overview of chapter one. Stick with us you realize it will be chapter seven before this makes too much sense. You really have to trust that you are learning important things and that it all makes sense when we bring it together like in chapter seven in a few weeks.