Intermediate Expressions
Transcript:
So welcome back we’re now going to talk about expressions. Expressions are a little more complex calculations that we can sort of do on the right hand side of the assignment statement. 
So one of the things about expressions is operators. And then operators in computer programming are very often the same as the mathematical operators but we don’t have all the fancy characters that we have in mathematics and so we have to choose what’s on the keyboard and then if we really go back to the 1960s and 1970s, I mean, we used what was on the keyboard in the 1960s and the 1970s to make these operators. So plus is addition, minus is subtraction, we don’t have a times sign or a dot in the middle so we use the asterisk as multiplication. Division, we can’t put two things over top of each other so we use slash for division. Raising to the power, because they didn’t have little characters back then is star start, which is raising to the power, and then remainder. The remainder is when you do integer division it’s also called a modulo operator it’s the remainder not the quotient. I’ve got a picture of that coming up. So here’s a whole series of little examples of this. Right, so we’ve already seen the plus, x equals x plus 1. Keep remembering that these assignments are arrows basically, arrow, arrow, they have a direction. Multiplication, 440 times 12 um dividing this by that’s division, over a thousand five point two eight here we’re going to put 23 into jj and then we’re going to do modulo. So that says take 23 divide it by five and give me back the remainder and put it in kk. So this is the expression that evaluates like this. Take 23 , divide five into 23, four remainder three, and that three is what comes back up here. So that is the remainder it’s also called modulo operator. It turns out that for things like picking a random number and then taking the modulo of 52 is a way to pick a card randomly. So this modulo operator is actually, especially in games and other things, super useful. So that’s the various operators.
It’s important to know which of these operators goes first that’s called: operator precedence.  Now normally, we put parentheses in, like you know the so if I put the parentheses in there I’d say this goes first parentheses, then this goes first, actually no not that one, whoops got that one wrong. This happens first, this happens, then this happens. Okay so  but it’s important for us to know, if there were no parentheses, the order in which these things will happen. 
So the way things work in terms of operator precedence is: parentheses are the most important thing, followed by raising to the power, all else being equal multiplication and division, are all both equal, and then addition and then within it’s adding left to right. So lets see an example of how this works. 
So if we take one plus two, raised to the three power, divided by four times five and we print out what comes out of this. So the way I did this when I was taking exams back many many years ago when I was first in computer science is that I would write it all down and I would look for the highest precedence thing. Now parentheses would make this easy but exponentiation is the first one. That means we’re going to take this and that’s going to be eight, two to the third power, two time two times two,  two cubed is eight then what I would do is I would rewrite the whole thing with the eight there. There I would look across and I’d look for multiplication because the powers been done the multiplication is what I’m looking for next. Then there’s both multiplication and division, they’re equal, they’re at the same level and so what happens  is they are done left to right. Eight divided by four happens before four times five so the fact that it’s not four times five but instead eight times four is because of the left-to-right rule so then this gets rewritten to be two, one plus two times five, and this one multiplication is the top one so that does this next. Two times five becomes ten, I rewrite it again. And then one plus ten additional is the lowest thing and that’s how we end up with eleven. And so that’s how I would do these problems if I ever saw the problem on an exam. And it’s a fun problem to put on exams because there is one and only one answer and every programming class has, usually, at least one slide about this stuff. So like I said, the rules go top to bottom, parentheses, power, multiplication, addition, and then left to right within it. 
So we talked about variables and computing values to put inside variables but the one thing you kind of also, maybe you’ve noticed it as we go by, is we have different kinds of data, we call it type. Is this of type integer, is this of type floating point number, is this of type string?   What is going on here? And Python is pretty smart about various kinds of types of data and so we’re adding one plus four here and Python knows as it looks at this that that’s an integer and that’s an integer and so we’ll add it together and make it an integer, so that thing is an integer. We can also use this plus to concatenate two strings: this is hello blank, plus there, and it plus looks here and says well that’s a string and that’s a string so I know what to do with strings, I will concatenate those two things together so it becomes another string that gets assigned int eee and it’s hello space there. The plus doesn’t add the space I added the space by putting it right there.
And so these operators are kind of smart in that they know what they’re dealing with and sometimes they will do one thing or another depending on the kinds of values, variables or constants that they’re working with.
And so sometimes type can get us in trouble. So here we have eee which is hello there because we’ve concatenated these two strings together, and now we’re adding one and the problem now is that it looks on one side and says that’s a string and that’s a number and says I don’t know how to do that. This is another one of those annoying errors that you like it you think  that somehow Python doesn’t like you but it just is confused. If you look at these things, traceback, traceback always means ‘I quit’ means I stopped, I ran it, it means I’m quitting now because I don’t want to go any farther because I’d  become confused. So it, so your program stops running, and it says here’s where I stopped running because we’re typing interactively it’s always line 1. Type with but if you read carefully and don’t get too stuck on too much stuff line 1 that tells us something. In module type error, can’t convert int object to str implicitly. So that’s an integer right there and that’s a string and that’s what it’s complaining about. That little bit right there. If Python is so grumpy about types then we should be able to ask it about types. So it turns out that there is, inside Python, a built in function called type, t-y-p-e. So we can pass into type so this syntax is calling  a built in function named type, parenthesis is the parameter that we’re passing to it, we’re saying hey hello tell me something about the type of the variable eee, and so this is a function the parentheses are part of the function call and it says oh that would be of class string. And then we can pass in a constant and say ‘hey what about hello the string hello’ it’s like oh that’s a string too. What about a one? Well that’s an integer. So we’re asking Python through the type function what the type of either a variable or a constant is. And there are even several types of numbers and we’ll even see booleans and others like later. Like one with no decimal that’s an integer number. 98.6 with a decimal that’s a floating point number and so constants and constants can be both integer and floating point and I’m just asking over and over and over again, what’s the type. What’s the type in xxx? What’s the type of what’s in temp? And what’s the type of the constant one. And what’s the type of 1.0? 
You can also use a set of built in functions like float and int to convert from one to another. And so this basically says I want to convert - oops let’s go back -- I want to convert 99 to a floating point number. So this is a function and it’s participating in this plus but before it can finish the plus it turns this into a 99.0. The difference between 99 as an integer and 99.0 is that it’s a  floating point number and that actually turns this computation as it looks to the left and looks to the right, it says ‘oh I’ve got a floating point number on one side, I’ve got an integer on the other side so I’m going to make my calculation overall be a floating point calculation. I can also pass into the float function. I can say take this variable ‘i’ which has a 42 also an integer and then give me back a floating point so that will be a 42.0 pass that into “f,” we print it out and it is indeed 42.0 and it’s a float. So in it knows the type and value of any variable. This is an integer and a value 42. This is a float of value 42.0. 
Um integer division in Python2 was kind of weird and it was actually one of the big things they changed between Python2 and Python3. This is a Python3 course so we’re not worried about that too much. What’s nice about integer division in Python3 is that it always produces a floating point result. And that means that Python3’s division is more predictable and it works more like a calculator. So in this case, I mean you can go back and look at my Python2 lectures, and see how crazy it was in Python2. Ten divided by two is 5.0 and the weird thing here is that the division forces the result of the calculation to be a floating point number. And this, you know ten over two could be five, but nine over two is 4.5 and so that is accurate. In old Python2 it would give us back four, which is completely unpredictable and weird. As you would expect if this were a calculator you get 0.99, actually what you get in Python2 is 0 because it would round it down. I mean it doesn’t round at all it truncates it. So 99 over 100 is 0.99, and then it truncates it to zero. That’s Python2, we’re not talking about Python2, there’s a good reason we’re not talking about Python2, welcome to Python3. Of course if there are floating point on either side, the result is still a floating point and the result is still a floating point. So integer division produces a floating result in Python 3.0 not in Python 2.0, that is an improvement in Python 3.0. And that’s why we’re recording these lectures. I have a whole great set of lectures about Python2 and now I’m going to have a great set of lectures about Python3. Welcome to Python3. 
Okay so, we’ve been talking about converting from integer to floating point but you can also convert from string to integer or string to floating point. And so here we start out with a little string value now it only works for strings that are made of digits, so “123” is not an integer it is a three character string that has one two three as the characters in that string. Which is very different than 123. We say what is the type of this, it’s a string. We say let’s add one to it and it says can’t convert int to string so that blows up right? Because this is a string, it looks to both sides, string plus an integer, not good. But we can convert this, we can call the int function, which is like the float function, and pass a string in. So it says hey take this and turn it into an integer so that the input of sval which is the string “123” and give me back an integer representation of that, which is going to be 123. So we say what kind of thing did we get back? Well we got back an integer, we can now add one two it and get 124. And so you have to manage the type of things and you can convert from one type to another. Now int is not magic, if you send something into it, a string that has, doesn’t consist of digits, then you’re going to end up with another error: invalid literal with base 10 blah blah blah blah blah. So it’s really complaining it says I want these to be numbers here and you just gave me letters so that’s going to cause this to fail. 
Another thing we’re going to do with variables is just like the print function takes something, a list of things, in this case a string comma variable and then prints some output in the program. The opposite of that is input, actually input generally, happens before output. Input is a built-in function and we pass to it a prompt, a string of text that’s going to be printed out for the user, and then it stops and waits so it says who are you and then right here it just sits, waiting, for us to type something. 
So we type blah blah blah blah and then hit the enter key, right we hit the enter key. And then this text ends up in this variable. So this is an assignment statement that Chuck is the result of the input call, gets copied into the “nam” variable. So let’s do that again. It’s evaluating the assignment statement, remember it’s kind of this way, or you can think of it as do just this right side first, it writes this out, writes that out then it waits, wait, wait, wait, wait, wait, until we hit the enter and takes this Chuck and that becomes the result of this input which is then assigned into nam. Now then we go sequentially to the next line, it prints out: Welcome comma and the contents of the variable nam. Now this one, this comma here, actually does put the space in here automatically. So it says Welcome Chuck. So it pulls, there’s no space in Chuck, just C-H-U-C-K and so print can take more than one thing, separated by commas. Matter of fact, print can have a whole bunch, oops come back come back come back, print can have comma comma comma parentheses as many as you like, everything you’ve seen up to now is kind of a one thing in the print but that doesn’t mean that print can only do one things. 
So I’ve talked about variables, we talked about contents, we’ve talked about input, we’ve talked about output and now it’s time to write our first meaningful program. And so this program has to do with those of you who have travelled internationally. If you’ve traveled in the United States and you’ve traveled outside the United States, you notice that there is an elevator convention that is different inside the United States. In the United States you walk in, the ground floor and in the elevator that’s “1.” If you walk in, the ground floor in Europe, or many other places in the world, and the elevator is “0.” So we have written a small app that we’re going to put on the App Store and get wealthy with called “elevator floor conversion app.” And it’s going to ask us, we’re in Europe and we’re lost and you say well what floor would this be if I was in the United States of America. And so here’s: we have to read the floor that we are at in Europe and then we’re going to convert it to a US floor and then we’re going to print it out. 
This is very silly, but it is a pure essential program that has input, does some kind of tasks on that input, and then produces that output which is useful, for some value of useful. Ok, so let’s take a look at how we combine everything that we’ve learned in this lecture, input, processing and output. It’s a three line program but it’s sort of the beginning of something that programs do. Okay you’re going to do lots of programs that do this. 
Ok so here we go. The program starts. We do the input, side effect it prints out this and then waits. We type in zero, that comes back here, and then the zero, which is a string, input gives you back a string it doesn’t give you back a number, it was a little different in Python2, but in Python3 it gives you back a string. So quote, zero, quote, which is what we typed here, we didn’t type the quotes, it’s a string, gets stored in the inp variable. Then we move onto the next statement and on this right hand side we convert that string variable to an integer, so that becomes the integer zero. We add one to it and then that becomes one and then we assign that into usf, I’ve named this variable United States floor, so inp is the input and usf that’s, mnemonic it doesn't know anything about elevators it’s just I picked a variable that was quite friendly. And so at this point usf has the United States floor that’s equivalent to the European floor and then I just fall down and I do a print statement. Print out US floor, US floor, comma, that’s this space right here, and then whatever’s the contents of the US floor variable is. And you can see that I could write this on four and it would say three. I could write this and say seven and it would say six. This is an amazing program. It converts floors in a European numbering scheme--wait actually no I got that wrong--hang on let me clear this. I wasn’t thinking clearly. I could type four and it would give me back five. I could type in six and it would give me back seven. See I’m confused, haven’t been in Europe in a couple of months, so I forgot all about the floors, but that’s the idea. Now, this is a super super super simple program, not super useful, but you get the idea, that we’re going to pull some data in, we’re going to do some intelligent thing, soon this will be hundreds of lines of code instead of one line of code, and then we are going to present the results to our user.  
Now, another element of most any programming language, is called a comment. A comment is a way for you to put in a program file, some text that’s to be ignored by Python or c or whatever language we happen to be using. In Python, comments start with a pound sign. So what you could do is put a pound sign anywhere in a line and then after the pound sign, Python ignored everything after that pound sign; it can be the first character. 
So here’s our recurring concept that we talk a lot about. We’re not going to cover this, remember what this does: this is counting how many letters the “the”, there’s 16 the-s, and there’s, in that file, there were six twos. This is that code. We’ll get back to this code. But what we’ve done here is, I’ve added some comments, that are really for human consumption. So this first paragraph is: get the name of the file and open it. The second paragraph is: count the word frequency. You know maybe I should have said histogram here. Count the word frequency and then assemble a histogram. And then here I’m putting this pound sign, finding the most common word and then I’m all done and I print this stuff out right? And so, all I’m saying is comments are for people to read: your next programmer or the person who’s going to change your program after you’re done with it, and they’re nice and you don’t have to use any particularly weird syntax, or variable naming conventions. You put a pound sign and you can write anything you want from that point forward. 
Ok so we’ve talked a little bit about variables and types and mnemonics and how we would choose variable names and how expressions work and the various operators, converting between different types. Printing input, output, and comments. So that just kind of gets us sentences. Coming up next we’ll talk about conditional execution where we’re really starting to move up to a paragraph, so see you in a bit.