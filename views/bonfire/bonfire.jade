extends ../layout
block content
    script(src='/js/lib/codemirror/lib/codemirror.js')
    script(src='/js/lib/codemirror/addon/edit/closebrackets.js')
    script(src='/js/lib/codemirror/addon/edit/matchbrackets.js')
    script(src='/js/lib/codemirror/addon/lint/lint.js')
    script(src='/js/lib/codemirror/addon/lint/javascript-lint.js')
    script(src='//ajax.aspnetcdn.com/ajax/jshint/r07/jshint.js')
    script(src='/js/lib/chai/chai.js')
    link(rel='stylesheet', href='/js/lib/codemirror/lib/codemirror.css')
    link(rel='stylesheet', href='/js/lib/codemirror/addon/lint/lint.css')
    link(rel='stylesheet', href='/js/lib/codemirror/theme/monokai.css')
    script(src='/js/lib/codemirror/mode/javascript/javascript.js')
    script(src='js/lib/jailed/jailed.js')
    script(src='/js/lib/bonfire/bonfire.js')

    .row
        .col-sm-12.col-md-12.col-xs-12
            .panel.panel-primary
                .panel-heading.text-center Bonfire Playground
                .panel.panel-body
                    form.code
                        .form-group.codeMirrorView
                            textarea#codeEditor(autofocus=true)
                    form.code
                        .form-group.codeMirrorView
                            textarea#codeOutput
                    #submitButton.btn.btn-primary.btn-big.btn-block Run my code
        .col-sm-12.col-md-4.col-xs-12
            .panel.panel-primary
                .panel-heading Test Code
                .panel.panel-body
                    form#testCreateForm.form-horizontal
                        .form-group
                            label(for='function-select').col-sm-6 Select function
                            select#testFunctionName.col-sm-6.text-info
                                option
                        #testInputs.form-group           
                        #testOutputs.form-group                            
                        br
                        #addTest.btn.text-info Create test
                    #hideTestCreate.btn.text-info Hide test creation dialogue

                    br
                    br
                    ul#testSuite.list-group

                    br

                    #runTests.btn.btn-primary.btn-big.btn-block Run my test suite
                    textarea#testOutput

                    //#hintButton.btn.btn-info.btn-big.btn-block Show me hints

                    script.
                        var widgets = [];
                        var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("codeEditor"), {
                            lineNumbers: true,
                            mode: "javascript",
                            theme: 'monokai',
                            runnable: true,
                            lint: true,
                            matchBrackets: true,
                            autoCloseBrackets: true,
                            cursorHeight: 0.85,
                            lineWrapping: true,
                            gutters: ["CodeMirror-lint-markers"],
                            onKeyEvent : doLinting
                        });
                        var editor = myCodeMirror;
                        myCodeMirror.setValue('/*Welcome to Bonfire, Free Code Camp\'s future CoderByte replacement.\n'+
                            'Please feel free to use Bonfire as an in-browser playground and linting tool.*/\n\n\n' +

                            'function test() {\n' +
                            '  return [1,2,3].map(function(elem) {\n' +
                            '    return elem * elem;\n' +
                            '  });\n' +
                            '}\n\n' +
                            'test();');
                        myCodeMirror.setSize("100%", 500);

                        var codeOutput = CodeMirror.fromTextArea(document.getElementById("codeOutput"), {
                            lineNumbers: false,
                            mode: "text",
                            theme: 'monokai',
                            readOnly: 'nocursor'
                        });
                        codeOutput.setSize("100%", 100);

                        var info = editor.getScrollInfo();
                        var after = editor.charCoords({line: editor.getCursor().line + 1, ch: 0}, "local").top;
                        if (info.top + info.clientHeight < after)
                            editor.scrollTo(null, after - info.clientHeight + 3);
                        var doLinting = function() {
                            editor.operation(function () {
                                for (var i = 0; i < widgets.length; ++i)
                                    editor.removeLineWidget(widgets[i]);
                                widgets.length = 0;
                                JSHINT(editor.getValue());
                                for (var i = 0; i < JSHINT.errors.length; ++i) {
                                    var err = JSHINT.errors[i];
                                    if (!err) continue;
                                    var msg = document.createElement("div");
                                    var icon = msg.appendChild(document.createElement("span"));
                                    icon.innerHTML = "!!";
                                    icon.className = "lint-error-icon";
                                    msg.appendChild(document.createTextNode(err.reason));
                                    msg.className = "lint-error";
                                    widgets.push(editor.addLineWidget(err.line - 1, msg, {
                                        coverGutter: false,
                                        noHScroll: true
                                    }));
                                }
                            });
                        };
                        $('#submitButton').on('click', function () {
                            $('#codeOutput').empty();
                            var js = myCodeMirror.getValue();
                            submit(js);
                        });
                        $('#runTests').on('click', function() {
                            testOutput.setValue("Tests run");
                            //get function from #testFunctionName children
                            //
                            var testCase = [];
                            $('#testSuite').find('li').each(function() {
                                testCase.push([$(this).data("input"),$(this).data("output"), $(this)]);
                            });
                            console.log(testCase);
                            var jsCode = myCodeMirror.getValue();
                            var testResults = [];
                            testCase.forEach(function(input) {
                                console.log(input[0], input[1])
                                var testCode = jsCode + "\n\n" + input[0] + ";"
                                console.log(testCode);
                                var output = eval(testCode);
                                console.log("Output ", output);
                                var assert = chai.assert;
                                var assertOut;
                                try {
                                    assertOut = eval("assert.strictEqual(" + output + "," + input[1] + ");");
                                    appendTestOutput("\n" + createTestString(input[0], [input[1]]) + "\nTest passed!\n");
                                    testResults.push(1);
                                } catch (err) {
                                    testResults.push(0);
                                    appendTestOutput("\n" + createTestString(input[0], [input[1]]) + "\nTest failed: \nOutput was: " + output + "\n");                                    
                                }   
                            }); 
                        });

                        var appendTestOutput = function(msg) {
                            testOutput.replaceRange(msg, CodeMirror.Pos(editor.lastLine()));
                        }

                        $('#addTest').on('click', function() {
                            //test that the inputs have text, alert otherwise
                            //test that there is some expected output, alert
                            var functionName = $('#testFunctionName option:selected').text();
                            var inputs = [];
                            var  outputs = [];
                            $('#testInputs').find('input').each(function(ix, el) {
                                console.log($(this));
                                if ($(this).val() != null && $(this).val().length !== 0) {
                                    inputs.push($(this).val());
                                }
                            });
                            $('#testOutputs').find('input').each(function(ix, el) {
                                console.log($(this));
                                outputs.push($(this).val());
                            });
                            var functionInput = functionName + "(" + inputs.join(",") + ")";
                            var count = $('#testSuite').length;
                            var test = document.createElement("li");
                            $(test).attr('id','test' + count)
                                .addClass('list-group-item')
                                .addClass('well')
                                .addClass('well-sm')
                                .attr({"data-input" : functionInput, "data-output" : outputs.join(",")})
                                .html(createTestString(functionInput, outputs))
                                .appendTo($('#testSuite'));
                            var closeLink = document.createElement('span');
                            $(closeLink)
                                .css("float", "right")
                                .addClass("glyphicon")
                                .addClass("glyphicon-trash")
                                .addClass("test-removal-link")
                                .click(function() {
                                    console.log("clicked");
                                    var input = prompt("This will remove the test permanently.\n If you want to do this, type delete");
                                    if (/delete/.test(input.toLowerCase())) {
                                        $(this).parent().remove();
                                    }

                                })
                                .appendTo($(test));
                            $("#testCreateForm").find("input[type=text]").val("");

                        });
                        var createTestString = function(inputs, outputs) {
                            return inputs + " === " + outputs.join(",");
                        }
                        $('.test-removal-link').on('click', function(){
                            var userInput = prompt("This will permanently remove the test.  If you want to do this, type delete.")
                            if (/delete/.test(userInput.toLowerCase())) {
                                $(this).parent().remove();
                            }
                        });
                        var testOutput = CodeMirror.fromTextArea(document.getElementById("testOutput"), {
                            lineNumbers: false,
                            mode: "javascript",
                            theme: 'monokai',
                            readOnly: 'nocursor'
                        });
                        testOutput.setSize("100%", 150);
                        
                        var createOptions = function(re, code) {
                            var m = re.exec(code);
                            while (m != null) {
                                console.log("Match", m);
                                console.log("Matches", m[1], m[2]);
                                var functionName = m[1];
                                console.log("Found " + functionName);
                                var currentState = $('#test-function-' + functionName)
                                if (functionName !== undefined && currentState.length === 0) {
                                    console.log("inside");
                                    var option = document.createElement('option');
                                    $(option)
                                        .html(functionName)
                                        .attr({"data-args": m[2], "id" : "test-function-"+functionName})
                                        .appendTo($('#testFunctionName'));
                                }
                                m = re.exec(code);

                            }                        
                        }
                        $('#testFunctionName').on('change', function() {
                            $('#testInputs').children().remove();
                            $('#testOutputs').children().remove();

                            var args = $('#testFunctionName option:selected').data("args");
                            console.log(args);
                            var argArray = args.split(",");
                            //.form-horizontal
                            //label(for='function-select').col-sm-6 Select function


                            argArray.forEach(function(arg) {
                                if (arg.length > 0) {
                                    createInputField('#testInputs', arg);
                                }
                            });
                            createInputField('#testOutputs', 'Expected output');
                            //Should remove all #testInputs and #testOutputs
                            //and create new ones
                            //gran arguments from data-args on the option
                        });
                        var createInputField = function(className, arg) {
                            var inputDiv = document.createElement('div');
                            $(inputDiv)
                                .addClass("control-group")
                                .appendTo($(className));
                            var inputLabel = document.createElement('label');
                            $(inputLabel)
                                .attr("for", "inputs")
                                .html(arg)
                                .addClass("col-xs-4 control-label")
                                .appendTo($(inputDiv));
                            var textDiv = document.createElement('div');
                            $(textDiv).addClass("col-xs-8 controls").appendTo($(inputDiv));
                            var inputArea = document.createElement('input');
                            $(inputArea)
                                .attr("type", "text")
                                .addClass("form-control")
                                .appendTo($(inputDiv));
                            $(document.createElement("br")).appendTo($(textDiv));

                        }
                        $('.removeTestFromSuite').on('click', function() {
                            //prevent default
                            //remove the closest li from the list
                        });
                        $('#testFunctionName').on('focus', function() {
                            $('#testFunctionName').children().remove();
                            var blankOpt = document.createElement("option");
                            $(blankOpt).addClass("selected").appendTo($('#testFunctionName'));
                            var re = /function (\w+)\(([\w\s,]*)\)/g;
                            var code = myCodeMirror.getValue();
                            createOptions(re, code);
                            re = /var (\w+)\s*=\s*function\s*\(([\w,]*)\)/g;
                            createOptions(re, code);
                        });
                        $('#hideTestCreate').on('click', function() {
                            var testForm = $("#testCreateForm");
                            if (testForm.is(":visible")) {
                                testForm.hide();
                                $(this).text("Create more tests");
                            } else {
                                testForm.show();
                                $(this).text("Hide test creation dialogue")
                            }
                        });
                        function encodeHTML(s) {
                            return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g,'&gt;')
                        }

